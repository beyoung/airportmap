---
import Layout from '../../layouts/Layout.astro';
import MiniMap from '../../components/MiniMap.astro';
import { AirportDatabase } from '../../lib/database';

// Get airport identifier from URL params
const { ident } = Astro.params;

if (!ident) {
  return Astro.redirect('/');
}

// Get database from Astro locals
const db = (Astro.locals as any).runtime?.env?.DB || (Astro.locals as any).DB;

if (!db) {
  throw new Error('Database not available');
}

// Create database instance and get airport data
const airportDb = new AirportDatabase(db);
const airportData = await airportDb.getAirportByCode(ident as string);

if (!airportData) {
  return Astro.redirect('/');
}

// Get nearby airports if coordinates are// Get nearby airports
let nearbyAirports: Array<{ident: string, name: string | null, municipality: string | null, iso_country: string | null, type: string | null, distance: number}> = [];
if (airportData.latitude_deg && airportData.longitude_deg) {
  const latDelta = 100 / 111; // 100km radius
  const lngDelta = 100 / (111 * Math.cos(airportData.latitude_deg * Math.PI / 180));

  const bounds = {
    north: airportData.latitude_deg + latDelta,
    south: airportData.latitude_deg - latDelta,
    east: airportData.longitude_deg + lngDelta,
    west: airportData.longitude_deg - lngDelta,
    limit: 3
  };

  const allNearby = await airportDb.getAirportsInBounds(bounds);

  // Calculate distances and filter
  const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {
    const R = 6371;
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
      Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  };

  nearbyAirports = allNearby
    .filter(airport => airport.ident !== airportData.ident && airport.latitude_deg && airport.longitude_deg)
    .map(airport => ({
      ...airport,
      distance: calculateDistance(
        airportData.latitude_deg!,
        airportData.longitude_deg!,
        airport.latitude_deg!,
        airport.longitude_deg!
      )
    }))
    .filter(airport => airport.distance <= 100)
    .sort((a, b) => a.distance - b.distance)
    .slice(0, 3);
}

// Get Wikipedia information if available
let wikipediaInfo = null;
if (airportData.wikipedia_link) {
  try {
    const match = airportData.wikipedia_link.match(/\/wiki\/([^#?]+)/);
    if (match) {
      const pageTitle = decodeURIComponent(match[1]);
      const langMatch = airportData.wikipedia_link.match(/\/\/(\w+)\.wikipedia\.org/);
      const language = langMatch ? langMatch[1] : 'en';

      const apiUrl = `https://${language}.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(pageTitle)}`;

      const response = await fetch(apiUrl, {
        headers: {
          'User-Agent': 'AyaMap-Airports/1.0 (https://airport.ayamap.com)'
        }
      });

      if (response.ok) {
        const data = await response.json();
        wikipediaInfo = {
          title: data.title || pageTitle,
          extract: data.extract || '',
          thumbnail: data.thumbnail?.source || null,
          url: data.content_urls?.desktop?.page || airportData.wikipedia_link,
          language: language
        };
      }
    }
  } catch (error) {
    console.error('Error fetching Wikipedia info:', error);
  }
}

// Prepare keywords
const keywords = airportData.keywords ? airportData.keywords.split(',').map(k => k.trim()).filter(k => k) : [];

const title = `${airportData.name || `${ident.toUpperCase()} Airport`} - Live Flights & Destinations - AyaMap`;
const iataCode = airportData.iata_code ? `(${airportData.iata_code})` : '';
const icaoCode = airportData.icao_code ? `ICAO: ${airportData.icao_code}` : '';
const codes = [iataCode, icaoCode].filter(c => c).join(' | ');
const description = `${airportData.name || ident.toUpperCase()} ${codes} in ${airportData.municipality || 'Unknown City'}, ${airportData.iso_country || 'Unknown Country'}. Check real-time flight departures and arrivals, view live flight status, and explore direct flight destinations from this airport.`;
const canonicalUrl = `https://airport.ayamap.com/airports/${ident}`;

// Helper function for type badges
function getTypeBadge(type: string | null) {
  switch (type) {
    case 'large_airport':
      return '<span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-0.5 rounded-full">Large Airport</span>';
    case 'medium_airport':
      return '<span class="bg-yellow-100 text-yellow-800 text-xs font-medium px-2 py-0.5 rounded-full">Medium Airport</span>';
    case 'small_airport':
      return '<span class="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-0.5 rounded-full">Small Airport</span>';
    case 'heliport':
      return '<span class="bg-purple-100 text-purple-800 text-xs font-medium px-2 py-0.5 rounded-full">Heliport</span>';
    case 'seaplane_base':
      return '<span class="bg-cyan-100 text-cyan-800 text-xs font-medium px-2 py-0.5 rounded-full">Seaplane Base</span>';
    default:
      return '<span class="bg-gray-100 text-gray-800 text-xs font-medium px-2 py-0.5 rounded-full">Other</span>';
  }
}
---

<Layout title={title} description={description}>
	<!-- SEO Meta Tags -->
	<meta name="keywords" content={`${ident} airport, ${ident} live flights, ${ident} departures, ${ident} arrivals, ${ident} direct flights, real-time flight status, airport information`} slot="head" />
	<link rel="canonical" href={canonicalUrl} slot="head" />

	<!-- Open Graph Meta Tags -->
	<meta property="og:title" content={title} slot="head" />
	<meta property="og:description" content={description} slot="head" />
	<meta property="og:url" content={canonicalUrl} slot="head" />
	<meta property="og:type" content="place" slot="head" />

	<!-- Structured Data -->
	<script type="application/ld+json" slot="head">
	{
		"@context": "https://schema.org",
		"@type": "Airport",
		"name": airportData.name || `${airportData.ident} Airport`,
		"identifier": airportData.ident,
		"iataCode": airportData.iata_code,
		"icaoCode": airportData.ident,
		"address": {
			"@type": "PostalAddress",
			"addressLocality": airportData.municipality,
			"addressCountry": airportData.iso_country
		},
		"geo": airportData.latitude_deg && airportData.longitude_deg ? {
			"@type": "GeoCoordinates",
			"latitude": airportData.latitude_deg,
			"longitude": airportData.longitude_deg
		} : undefined,
		"elevation": airportData.elevation_ft ? `${airportData.elevation_ft} ft` : undefined,
		"url": `https://airport.ayamap.com/airports/${airportData.ident}`
	}
	</script>

	<main class="min-h-screen bg-gray-50">
		<!-- Header Section -->
		<section class="bg-white shadow-sm">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<div class="flex items-center justify-between">
					<div>
						<nav class="flex items-center space-x-2 text-sm text-gray-500 mb-4">
							<a href="/" class="hover:text-blue-600">Home</a>
							<span>/</span>
							{airportData.iso_country && (
								<>
									<a href={`/countries/${airportData.iso_country.toLowerCase()}`} class="hover:text-blue-600">{airportData.iso_country.toUpperCase()}</a>
									<span>/</span>
								</>
							)}
							<span class="font-medium text-gray-900">{airportData.ident}</span>
						</nav>
						<h1 class="text-4xl font-bold text-gray-900 mb-2">
							{airportData.name || `${airportData.ident} Airport`}
						</h1>
						<p class="text-xl text-gray-600">
							{airportData.municipality || 'Unknown City'}, {airportData.iso_country || 'Unknown Country'}
						</p>
					</div>

				</div>
			</div>
		</section>

		<!-- Airport Details Section -->
		<section class="py-8">
			<div class="max-w-[1400px] mx-auto px-4 sm:px-6 lg:px-8">
				<div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
					<!-- Main Information -->
					<div class="lg:col-span-3 space-y-6">
						<!-- Basic Info Card -->
						<div class="bg-white rounded-lg shadow-sm p-6">
							<h2 class="text-2xl font-bold text-gray-900 mb-4">Basic Information</h2>
							<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">ICAO Code</label>
									<p class="text-lg font-semibold text-gray-900">{airportData.icao_code || '-'}</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">IATA Code</label>
									<p class="text-lg font-semibold text-gray-900">{airportData.iata_code || '-'}</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Type</label>
									<div set:html={getTypeBadge(airportData.type)}></div>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Country</label>
									<p class="text-lg text-gray-900">{airportData.iso_country || '-'}</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Region</label>
									<p class="text-lg text-gray-900">{airportData.iso_region || '-'}</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Municipality</label>
									<p class="text-lg text-gray-900">{airportData.municipality || '-'}</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Elevation</label>
									<p class="text-lg text-gray-900">{airportData.elevation_ft ? `${airportData.elevation_ft} ft` : '-'}</p>
								</div>
							</div>
						</div>

						<!-- Location Card -->
						<div class="bg-white rounded-lg shadow-sm p-6">
							<h2 class="text-2xl font-bold text-gray-900 mb-4">Location</h2>
							<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Latitude</label>
									<p class="text-lg text-gray-900">{airportData.latitude_deg ? airportData.latitude_deg.toFixed(6) : '-'}</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Longitude</label>
									<p class="text-lg text-gray-900">{airportData.longitude_deg ? airportData.longitude_deg.toFixed(6) : '-'}</p>
								</div>
							</div>
							<!-- Mini Map -->
							{airportData.latitude_deg && airportData.longitude_deg ? (
								<MiniMap
									latitude={airportData.latitude_deg}
									longitude={airportData.longitude_deg}
									name={airportData.name || `${airportData.ident} Airport`}
									ident={airportData.ident}
									municipality={airportData.municipality || undefined}
									iso_country={airportData.iso_country || undefined}
								/>
							) : (
								<div class="h-64 rounded-lg overflow-hidden border border-gray-200 flex items-center justify-center bg-gray-100">
									<p class="text-gray-600">Location coordinates not available</p>
								</div>
							)}
						</div>

						<!-- Flight Information -->
						{airportData.iata_code && (
							<div class="bg-white rounded-lg shadow-sm p-6">
								<h2 class="text-2xl font-bold text-gray-900 mb-4">✈️ Flight Information</h2>
								<div class="avionio-widget">
									<iframe height="800px" frameborder="0" style="border:0; width: 100%; margin:0; padding:0;" src={`https://www.avionio.com/widget/en/${airportData.iata_code.toLowerCase()}/departures?style=2`}></iframe>
									<div style="font-size:12px; width: 100%; text-align: center;">
										<a style="text-decoration:none; color:#333;" href={`https://www.avionio.com/en/airport/${airportData.iata_code.toLowerCase()}/departures`} title={`${airportData.iata_code} Departures`} target="_blank">{airportData.iata_code} Departures</a>
										<span style="color: #FD6150;">♥</span>
										<a style="text-decoration:none; color:#333;" href="https://www.avionio.com/" target="_blank" title="Airport arrivals and departures worldwide">Avionio.com</a>
									</div>
								</div>
							</div>
						)}

						<!-- Wikipedia Information -->
						{wikipediaInfo && (
							<div class="bg-white rounded-lg shadow-sm p-6">
								<h2 class="text-2xl font-bold text-gray-900 mb-4">About This Airport</h2>
								<div class="prose max-w-none">
								<div class="flex flex-col md:flex-row gap-4">
									<div class="flex-1 min-w-0">
										<h3 class="text-lg font-semibold text-gray-900 mb-2">{wikipediaInfo.title}</h3>
										<p class="text-gray-700 leading-relaxed mb-4">{wikipediaInfo.extract}</p>
									</div>
									{wikipediaInfo.thumbnail && (
										<div class="flex-shrink-0 w-full md:w-48">
											<img
												src={wikipediaInfo.thumbnail}
												alt={wikipediaInfo.title}
												class="w-full h-auto rounded-lg shadow-md object-cover"
												loading="lazy"
											/>
										</div>
									)}
								</div>
							</div>
								<div class="mt-4 pt-4 border-t border-gray-200">
									<a
										href={wikipediaInfo.url}
										target="_blank"
										rel="noopener noreferrer"
										class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium"
									>
										Read more on Wikipedia
										<svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
										</svg>
									</a>
								</div>
							</div>
						)}

						<!-- Direct Flight Destinations -->
						{airportData.destinationsData && airportData.destinationsData.direct_flights && airportData.destinationsData.direct_flights.length > 0 && (
							<div class="bg-white rounded-lg shadow-sm p-6">
								<h2 class="text-2xl font-bold text-gray-900 mb-4">✈️ Direct Flight Destinations</h2>
								<p class="text-sm text-gray-600 mb-4">
									From {airportData.destinationsData.departure_airport.name} ({airportData.destinationsData.departure_airport.iata})
								</p>
								<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
									{airportData.destinationsData.direct_flights.map((destination) => (
										<div class="border border-gray-200 rounded-lg p-4 hover:border-blue-300 hover:shadow-md transition-all">
											<h3 class="font-semibold text-gray-900 mb-2 flex items-center">
												<span class="text-lg">📍</span>
												<span class="ml-2">{destination.city}</span>
											</h3>
											<div class="space-y-2">
												{destination.airports.map((airport) => (
													<a
														href={`/airports/${airport.icao || airport.iata}`}
														class="block p-2 bg-gray-50 rounded hover:bg-blue-50 transition-colors"
													>
														<div class="flex items-center justify-between">
															<div class="flex-1 min-w-0">
																<p class="text-sm font-medium text-gray-900 truncate">
																	{airport.name}
																</p>
																<p class="text-xs text-gray-500">
																	{airport.iata} / {airport.icao}
																</p>
															</div>
															<svg class="w-4 h-4 text-gray-400 flex-shrink-0 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
															</svg>
														</div>
													</a>
												))}
											</div>
										</div>
									))}
								</div>
							</div>
						)}
					</div>

					<!-- Sidebar -->
					<div class="space-y-6">
						<!-- Quick Actions -->
						<div class="bg-white rounded-lg shadow-sm p-6">
							<h3 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
							<div class="space-y-3">
								<button id="copy-coordinates" class="w-full bg-blue-50 text-blue-700 px-4 py-2 rounded-lg hover:bg-blue-100 transition-colors text-sm font-medium">
									📋 Copy Coordinates
								</button>
								<a id="google-maps-link" href={`https://www.google.com/maps?q=${airportData.latitude_deg},${airportData.longitude_deg}`} target="_blank" rel="noopener noreferrer" class="block w-full bg-green-50 text-green-700 px-4 py-2 rounded-lg hover:bg-green-100 transition-colors text-sm font-medium text-center">
									🗺️ Open in Google Maps
								</a>
								{airportData.home_link && (
									<a href={airportData.home_link} target="_blank" rel="noopener noreferrer" class="block w-full bg-purple-50 text-purple-700 px-4 py-2 rounded-lg hover:bg-purple-100 transition-colors text-sm font-medium text-center">
										🏠 Official Website
									</a>
								)}
								{airportData.wikipedia_link && (
									<a href={airportData.wikipedia_link} target="_blank" rel="noopener noreferrer" class="block w-full bg-orange-50 text-orange-700 px-4 py-2 rounded-lg hover:bg-orange-100 transition-colors text-sm font-medium text-center">
										📖 Wikipedia Article
									</a>
								)}
							</div>
						</div>

						<!-- Related Airports -->
						{nearbyAirports.length > 0 && (
							<div class="bg-white rounded-lg shadow-sm p-6">
								<h3 class="text-lg font-semibold text-gray-900 mb-4">Nearby Airports</h3>
								<div class="space-y-3">
									{nearbyAirports.map((airport) => (
										<div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
												<div class="flex-1 min-w-0">
													<div class="flex items-center space-x-2">
														<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 whitespace-nowrap flex-shrink-0">
															{airport.ident}
														</span>
														<div class="min-w-0 flex-1">
															<h4 class="text-sm font-medium text-gray-900 truncate">
																<a href={`/airports/${airport.ident}`} class="hover:text-blue-600">
																	{airport.name || airport.ident}
																</a>
															</h4>
															<p class="text-xs text-gray-500 truncate">
																{airport.municipality ? `${airport.municipality}, ` : ''}{airport.iso_country}
															</p>
														</div>
													</div>
												</div>
												<div class="text-right flex-shrink-0 ml-2">
													<span class="text-sm text-gray-500">{airport.distance.toFixed(1)} km</span>
													<div class="mt-1 text-xs" set:html={getTypeBadge(airport.type)}></div>
												</div>
											</div>
									))}
								</div>
							</div>
						)}

						<!-- Keywords -->
						<div id="keywords-section" class="bg-white rounded-lg shadow-sm p-6 hidden">
							<h3 class="text-lg font-semibold text-gray-900 mb-4">Keywords</h3>
							<div id="keywords-list" class="flex flex-wrap gap-2">
								<!-- Keywords will be displayed here -->
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>

		<!-- Error State -->
		<section id="error-section" class="hidden py-12">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<div class="text-center">
					<div class="text-red-500 text-6xl mb-4">⚠️</div>
					<h2 class="text-2xl font-bold text-gray-900 mb-2">Airport Not Found</h2>
					<p class="text-gray-600 mb-4">The airport with identifier "{ident}" could not be found.</p>
					<a href="/" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors">
						Go to Home
					</a>
				</div>
			</div>
		</section>
	</main>
</Layout>

<script define:vars={{ airportData, nearbyAirports, wikipediaInfo }}>
	// Copy coordinates to clipboard
	async function copyCoordinates() {
		if (!airportData || !airportData.latitude_deg || !airportData.longitude_deg) return;

		const coordinates = `${airportData.latitude_deg}, ${airportData.longitude_deg}`;
		try {
			await navigator.clipboard.writeText(coordinates);
			// Show temporary feedback
			const copyBtn = document.getElementById('copy-coordinates');
			const originalText = copyBtn.textContent;
			copyBtn.textContent = '✅ Copied!';
			setTimeout(() => {
				copyBtn.textContent = originalText;
			}, 2000);
		} catch (error) {
			console.error('Failed to copy coordinates:', error);
		}
	}

	document.getElementById('copy-coordinates').addEventListener('click', copyCoordinates);
</script>

<style>
	.prose p {
		margin-bottom: 1rem;
		line-height: 1.7;
	}
</style>
