---
import Layout from '../../layouts/Layout.astro';

// Get airport identifier from URL params
const { ident } = Astro.params;

if (!ident) {
  return Astro.redirect('/');
}

const title = `${ident.toUpperCase()} Airport Details - AyaMap Airports`;
const description = `Detailed information about ${ident.toUpperCase()} airport including location, facilities, and operational data.`;
const canonicalUrl = `https://ayamap-airports.pages.dev/airports/${ident}`;
---

<Layout title={title}>
	<!-- SEO Meta Tags -->
	<meta name="description" content={description} slot="head" />
	<meta name="keywords" content={`airport ${ident}, ${ident} airport info, aviation, flight information, airport details`} slot="head" />
	<link rel="canonical" href={canonicalUrl} slot="head" />
	
	<!-- Open Graph Meta Tags -->
	<meta property="og:title" content={title} slot="head" />
	<meta property="og:description" content={description} slot="head" />
	<meta property="og:url" content={canonicalUrl} slot="head" />
	<meta property="og:type" content="place" slot="head" />
	
	<!-- Structured Data Placeholder (will be populated by JavaScript) -->
	<script type="application/ld+json" id="airport-structured-data" slot="head">
	{
		"@context": "https://schema.org",
		"@type": "Airport",
		"name": "Loading...",
		"identifier": ident?.toUpperCase()
	}
	</script>

	<main class="min-h-screen bg-gray-50">
		<!-- Header Section -->
		<section class="bg-white shadow-sm">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<div class="flex items-center justify-between">
					<div>
						<nav class="flex items-center space-x-2 text-sm text-gray-500 mb-4">
							<a href="/" class="hover:text-blue-600">Home</a>
							<span>/</span>
							<span id="country-breadcrumb" class="hover:text-blue-600 cursor-pointer">Loading...</span>
							<span>/</span>
							<span class="font-medium text-gray-900">{ident.toUpperCase()}</span>
						</nav>
						<h1 id="airport-name" class="text-4xl font-bold text-gray-900 mb-2">
							{ident.toUpperCase()} Airport
						</h1>
						<p id="airport-location" class="text-xl text-gray-600">
							Loading airport information...
						</p>
					</div>
					<div class="flex gap-3">
						<button id="back-btn" class="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors">
							‚Üê Back
						</button>
						<button id="view-on-map" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
							üó∫Ô∏è View on Map
						</button>
					</div>
				</div>
			</div>
		</section>

		<!-- Loading State -->
		<section id="loading-section" class="py-12">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<div class="text-center">
					<div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
					<p class="text-gray-600">Loading airport details...</p>
				</div>
			</div>
		</section>

		<!-- Airport Details Section -->
		<section id="airport-section" class="hidden py-8">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
					<!-- Main Information -->
					<div class="lg:col-span-2 space-y-6">
						<!-- Basic Info Card -->
						<div class="bg-white rounded-lg shadow-sm p-6">
							<h2 class="text-2xl font-bold text-gray-900 mb-4">Basic Information</h2>
							<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Airport Code</label>
									<p id="airport-ident" class="text-lg font-semibold text-gray-900">-</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Type</label>
									<div id="airport-type">-</div>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Country</label>
									<p id="airport-country" class="text-lg text-gray-900">-</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Region</label>
									<p id="airport-region" class="text-lg text-gray-900">-</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Municipality</label>
									<p id="airport-municipality" class="text-lg text-gray-900">-</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Elevation</label>
									<p id="airport-elevation" class="text-lg text-gray-900">-</p>
								</div>
							</div>
						</div>

						<!-- Location Card -->
						<div class="bg-white rounded-lg shadow-sm p-6">
							<h2 class="text-2xl font-bold text-gray-900 mb-4">Location</h2>
							<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Latitude</label>
									<p id="airport-latitude" class="text-lg text-gray-900">-</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500 mb-1">Longitude</label>
									<p id="airport-longitude" class="text-lg text-gray-900">-</p>
								</div>
							</div>
							<!-- Mini Map Placeholder -->
							<div id="mini-map" class="h-64 bg-gray-100 rounded-lg flex items-center justify-center">
								<p class="text-gray-500">Map will be displayed here</p>
							</div>
						</div>

						<!-- Wikipedia Information -->
						<div id="wikipedia-section" class="bg-white rounded-lg shadow-sm p-6 hidden">
							<h2 class="text-2xl font-bold text-gray-900 mb-4">About This Airport</h2>
							<div id="wikipedia-content" class="prose max-w-none">
								<!-- Wikipedia content will be loaded here -->
							</div>
							<div id="wikipedia-source" class="mt-4 pt-4 border-t border-gray-200">
								<!-- Wikipedia source link will be added here -->
							</div>
						</div>
					</div>

					<!-- Sidebar -->
					<div class="space-y-6">
						<!-- Quick Actions -->
						<div class="bg-white rounded-lg shadow-sm p-6">
							<h3 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
							<div class="space-y-3">
								<button id="copy-coordinates" class="w-full bg-blue-50 text-blue-700 px-4 py-2 rounded-lg hover:bg-blue-100 transition-colors text-sm font-medium">
									üìã Copy Coordinates
								</button>
								<a id="google-maps-link" href="#" target="_blank" class="block w-full bg-green-50 text-green-700 px-4 py-2 rounded-lg hover:bg-green-100 transition-colors text-sm font-medium text-center">
									üó∫Ô∏è Open in Google Maps
								</a>
								<a id="home-link" href="#" target="_blank" class="hidden w-full bg-purple-50 text-purple-700 px-4 py-2 rounded-lg hover:bg-purple-100 transition-colors text-sm font-medium text-center">
									üè† Official Website
								</a>
								<a id="wikipedia-link" href="#" target="_blank" class="hidden w-full bg-orange-50 text-orange-700 px-4 py-2 rounded-lg hover:bg-orange-100 transition-colors text-sm font-medium text-center">
									üìñ Wikipedia Article
								</a>
							</div>
						</div>

						<!-- Related Airports -->
						<div id="related-airports" class="bg-white rounded-lg shadow-sm p-6 hidden">
							<h3 class="text-lg font-semibold text-gray-900 mb-4">Nearby Airports</h3>
							<div id="nearby-airports-list" class="space-y-3">
								<!-- Nearby airports will be loaded here -->
							</div>
						</div>

						<!-- Keywords -->
						<div id="keywords-section" class="bg-white rounded-lg shadow-sm p-6 hidden">
							<h3 class="text-lg font-semibold text-gray-900 mb-4">Keywords</h3>
							<div id="keywords-list" class="flex flex-wrap gap-2">
								<!-- Keywords will be displayed here -->
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>

		<!-- Error State -->
		<section id="error-section" class="hidden py-12">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<div class="text-center">
					<div class="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
					<h2 class="text-2xl font-bold text-gray-900 mb-2">Airport Not Found</h2>
					<p class="text-gray-600 mb-4">The airport with identifier "{ident}" could not be found.</p>
					<a href="/" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors">
						Go to Home
					</a>
				</div>
			</div>
		</section>
	</main>
</Layout>

<script define:vars={{ ident }}>
	let airportData = null;

	// DOM elements
	const loadingSection = document.getElementById('loading-section');
	const airportSection = document.getElementById('airport-section');
	const errorSection = document.getElementById('error-section');
	const wikipediaSection = document.getElementById('wikipedia-section');
	const relatedAirports = document.getElementById('related-airports');
	const keywordsSection = document.getElementById('keywords-section');

	// Header elements
	const airportName = document.getElementById('airport-name');
	const airportLocation = document.getElementById('airport-location');
	const countryBreadcrumb = document.getElementById('country-breadcrumb');

	// Info elements
	const airportIdent = document.getElementById('airport-ident');
	const airportType = document.getElementById('airport-type');
	const airportCountry = document.getElementById('airport-country');
	const airportRegion = document.getElementById('airport-region');
	const airportMunicipality = document.getElementById('airport-municipality');
	const airportElevation = document.getElementById('airport-elevation');
	const airportLatitude = document.getElementById('airport-latitude');
	const airportLongitude = document.getElementById('airport-longitude');

	// Action elements
	const backBtn = document.getElementById('back-btn');
	const viewOnMapBtn = document.getElementById('view-on-map');
	const copyCoordinatesBtn = document.getElementById('copy-coordinates');
	const googleMapsLink = document.getElementById('google-maps-link');
	const homeLink = document.getElementById('home-link');
	const wikipediaLink = document.getElementById('wikipedia-link');

	// Content elements
	const wikipediaContent = document.getElementById('wikipedia-content');
	const wikipediaSource = document.getElementById('wikipedia-source');
	const nearbyAirportsList = document.getElementById('nearby-airports-list');
	const keywordsList = document.getElementById('keywords-list');

	// Load airport data
	async function loadAirportData() {
		try {
			showLoading();
			
			const response = await fetch(`/api/airports/${ident}`);
			if (!response.ok) {
				if (response.status === 404) {
					showError();
					return;
				}
				throw new Error('Failed to fetch airport data');
			}
			
			const data = await response.json();
			airportData = data.airport;
			
			updateAirportInfo();
			loadWikipediaInfo();
			loadNearbyAirports();
			showAirport();
			
		} catch (error) {
			console.error('Error loading airport data:', error);
			showError();
		}
	}

	// Update airport information
	function updateAirportInfo() {
		if (!airportData) return;
		
		// Update header
		airportName.textContent = airportData.name || `${airportData.ident} Airport`;
		airportLocation.textContent = `${airportData.municipality || 'Unknown City'}, ${airportData.iso_country || 'Unknown Country'}`;
		
		// Update breadcrumb
		if (airportData.iso_country) {
			countryBreadcrumb.textContent = airportData.iso_country.toUpperCase();
			countryBreadcrumb.onclick = () => {
				window.location.href = `/countries/${airportData.iso_country.toLowerCase()}`;
			};
		}
		
		// Update basic info
		airportIdent.textContent = airportData.ident;
		airportType.innerHTML = getTypeBadge(airportData.type);
		airportCountry.textContent = airportData.iso_country || '-';
		airportRegion.textContent = airportData.iso_region || '-';
		airportMunicipality.textContent = airportData.municipality || '-';
		airportElevation.textContent = airportData.elevation_ft ? `${airportData.elevation_ft} ft` : '-';
		
		// Update location
		airportLatitude.textContent = airportData.latitude_deg ? airportData.latitude_deg.toFixed(6) : '-';
		airportLongitude.textContent = airportData.longitude_deg ? airportData.longitude_deg.toFixed(6) : '-';
		
		// Update action links
		if (airportData.latitude_deg && airportData.longitude_deg) {
			googleMapsLink.href = `https://www.google.com/maps?q=${airportData.latitude_deg},${airportData.longitude_deg}`;
		}
		
		if (airportData.home_link) {
			homeLink.href = airportData.home_link;
			homeLink.classList.remove('hidden');
		}
		
		if (airportData.wikipedia_link) {
			wikipediaLink.href = airportData.wikipedia_link;
			wikipediaLink.classList.remove('hidden');
		}
		
		// Update keywords
		if (airportData.keywords) {
			const keywords = airportData.keywords.split(',').map(k => k.trim()).filter(k => k);
			if (keywords.length > 0) {
				keywordsList.innerHTML = keywords.map(keyword => 
					`<span class="bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded">${keyword}</span>`
				).join('');
				keywordsSection.classList.remove('hidden');
			}
		}
		
		// Update structured data
		const structuredData = {
			"@context": "https://schema.org",
			"@type": "Airport",
			"name": airportData.name || `${airportData.ident} Airport`,
			"identifier": airportData.ident,
			"iataCode": airportData.iata_code,
			"icaoCode": airportData.ident,
			"address": {
				"@type": "PostalAddress",
				"addressLocality": airportData.municipality,
				"addressCountry": airportData.iso_country
			},
			"geo": airportData.latitude_deg && airportData.longitude_deg ? {
				"@type": "GeoCoordinates",
				"latitude": airportData.latitude_deg,
				"longitude": airportData.longitude_deg
			} : undefined,
			"elevation": airportData.elevation_ft ? `${airportData.elevation_ft} ft` : undefined,
			"url": `https://ayamap-airports.pages.dev/airports/${airportData.ident}`
		};
		
		// Update the structured data script
		const structuredDataScript = document.getElementById('airport-structured-data');
		if (structuredDataScript) {
			structuredDataScript.textContent = JSON.stringify(structuredData, null, 2);
		}
	}

	// Get airport type badge
	function getTypeBadge(type) {
		switch (type) {
			case 'large_airport':
				return '<span class="bg-green-100 text-green-800 text-sm font-medium px-3 py-1 rounded-full">Large Airport</span>';
			case 'medium_airport':
				return '<span class="bg-yellow-100 text-yellow-800 text-sm font-medium px-3 py-1 rounded-full">Medium Airport</span>';
			case 'small_airport':
				return '<span class="bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full">Small Airport</span>';
			case 'heliport':
				return '<span class="bg-purple-100 text-purple-800 text-sm font-medium px-3 py-1 rounded-full">Heliport</span>';
			case 'seaplane_base':
				return '<span class="bg-cyan-100 text-cyan-800 text-sm font-medium px-3 py-1 rounded-full">Seaplane Base</span>';
			default:
				return '<span class="bg-gray-100 text-gray-800 text-sm font-medium px-3 py-1 rounded-full">Other</span>';
		}
	}

	// Load Wikipedia information
	async function loadWikipediaInfo() {
		if (!airportData || !airportData.wikipedia_link) return;
		
		try {
			const response = await fetch(`/api/wikipedia?url=${encodeURIComponent(airportData.wikipedia_link)}`);
			if (!response.ok) return;
			
			const data = await response.json();
			if (data.extract) {
				wikipediaContent.innerHTML = `<p class="text-gray-700 leading-relaxed">${data.extract}</p>`;
				wikipediaSource.innerHTML = `
					<p class="text-sm text-gray-500">
						Source: <a href="${airportData.wikipedia_link}" target="_blank" class="text-blue-600 hover:text-blue-800">Wikipedia</a>
					</p>
				`;
				wikipediaSection.classList.remove('hidden');
			}
		} catch (error) {
			console.error('Error loading Wikipedia info:', error);
		}
	}

	// Load nearby airports
	async function loadNearbyAirports() {
		if (!airportData || !airportData.latitude_deg || !airportData.longitude_deg) return;
		
		try {
			const response = await fetch(`/api/airports/nearby?lat=${airportData.latitude_deg}&lng=${airportData.longitude_deg}&limit=5`);
			if (!response.ok) return;
			
			const data = await response.json();
			const nearby = data.airports.filter(a => a.ident !== airportData.ident);
			
			if (nearby.length > 0) {
				nearbyAirportsList.innerHTML = nearby.map(airport => `
					<div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
						<div>
							<p class="font-medium text-gray-900">${airport.name || airport.ident}</p>
							<p class="text-sm text-gray-600">${airport.municipality || 'Unknown City'}</p>
						</div>
						<a href="/airports/${airport.ident}" class="text-blue-600 hover:text-blue-800 text-sm font-medium">
							View ‚Üí
						</a>
					</div>
				`).join('');
				relatedAirports.classList.remove('hidden');
			}
		} catch (error) {
			console.error('Error loading nearby airports:', error);
		}
	}

	// Copy coordinates to clipboard
	async function copyCoordinates() {
		if (!airportData || !airportData.latitude_deg || !airportData.longitude_deg) return;
		
		const coordinates = `${airportData.latitude_deg}, ${airportData.longitude_deg}`;
		try {
			await navigator.clipboard.writeText(coordinates);
			// Show temporary feedback
			const originalText = copyCoordinatesBtn.textContent;
			copyCoordinatesBtn.textContent = '‚úÖ Copied!';
			setTimeout(() => {
				copyCoordinatesBtn.textContent = originalText;
			}, 2000);
		} catch (error) {
			console.error('Failed to copy coordinates:', error);
		}
	}

	// Show/hide sections
	function showLoading() {
		loadingSection.classList.remove('hidden');
		airportSection.classList.add('hidden');
		errorSection.classList.add('hidden');
	}

	function showAirport() {
		loadingSection.classList.add('hidden');
		airportSection.classList.remove('hidden');
		errorSection.classList.add('hidden');
	}

	function showError() {
		loadingSection.classList.add('hidden');
		airportSection.classList.add('hidden');
		errorSection.classList.remove('hidden');
	}

	// Event listeners
	backBtn.addEventListener('click', () => {
		window.history.back();
	});

	viewOnMapBtn.addEventListener('click', () => {
		if (airportData) {
			window.location.href = `/?airport=${airportData.ident}`;
		}
	});

	copyCoordinatesBtn.addEventListener('click', copyCoordinates);

	// Initialize
	loadAirportData();
</script>

<style>
	.prose p {
		margin-bottom: 1rem;
		line-height: 1.7;
	}
</style>