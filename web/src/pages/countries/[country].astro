---
import Layout from "../../layouts/Layout.astro";
import { AirportDatabase } from "../../lib/database";

// Get country from URL params
const { country } = Astro.params;

if (!country) {
    return Astro.redirect("/countries");
}

// Get URL parameters for pagination and filtering
const url = Astro.url;
const page = parseInt(url.searchParams.get("page") || "1");
const query = url.searchParams.get("q") || "";
const type = url.searchParams.get("type") || "";
const sort = url.searchParams.get("sort") || "name";
const limit = 18;

// Get database from Astro locals
const dbInstance =
    (Astro.locals as any).runtime?.env?.DB || (Astro.locals as any).DB;

if (!dbInstance) {
    throw new Error("Database not available");
}

// Create database instance
const db = new AirportDatabase(dbInstance);

// Get country stats and airports data
let countryStats: any = null;
let airports: any[] = [];
let pagination: any = null;
let countryName = country.toUpperCase();

try {
    // Get country statistics
    countryStats = await db.getCountryStatsByCode(country.toUpperCase());

    // Get all airports for the country
    const allAirports = await db.getAirportsByCountry(country.toUpperCase());

    // Apply filtering
    let filteredAirports = allAirports;

    if (query) {
        filteredAirports = filteredAirports.filter(
            (airport) =>
                (airport.name || "")
                    .toLowerCase()
                    .includes(query.toLowerCase()) ||
                (airport.ident || "")
                    .toLowerCase()
                    .includes(query.toLowerCase()) ||
                (airport.municipality || "")
                    .toLowerCase()
                    .includes(query.toLowerCase()),
        );
    }

    if (type) {
        filteredAirports = filteredAirports.filter(
            (airport) => airport.type === type,
        );
    }

    // Apply sorting
    filteredAirports.sort((a, b) => {
        switch (sort) {
            case "type":
                const typeOrder = {
                    large_airport: 1,
                    medium_airport: 2,
                    small_airport: 3,
                };
                const aType =
                    typeOrder[a.type as keyof typeof typeOrder] || 999;
                const bType =
                    typeOrder[b.type as keyof typeof typeOrder] || 999;
                return aType - bType;
            case "municipality":
                const aMuni = a.municipality || "";
                const bMuni = b.municipality || "";
                return aMuni.localeCompare(bMuni);
            default: // name
                const aName = a.name || a.ident || "";
                const bName = b.name || b.ident || "";
                return aName.localeCompare(bName);
        }
    });

    // Apply pagination
    const total = filteredAirports.length;
    const totalPages = Math.ceil(total / limit) || 1;
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;

    airports = filteredAirports.slice(startIndex, endIndex);

    pagination = {
        current_page: page,
        total_pages: totalPages,
        total_items: total,
        has_prev: page > 1,
        has_next: page < totalPages,
        limit,
    };

    // Get country name from stats or first airport
    if (countryStats?.country_name) {
        countryName = countryStats.country_name;
    } else if (airports.length > 0 && airports[0].iso_country) {
        countryName = airports[0].iso_country;
    }
} catch (error) {
    console.error("Error fetching data:", error);
}

// Helper function to build URL with parameters
function buildUrl(params: Record<string, string | number>) {
    const searchParams = new URLSearchParams();

    Object.entries(params).forEach(([key, value]) => {
        if (value && value !== "" && value !== 1) {
            searchParams.set(key, value.toString());
        }
    });

    const queryString = searchParams.toString();
    return `/countries/${country}${queryString ? "?" + queryString : ""}`;
}

// Helper function for type badges
function getTypeBadge(type: string | null) {
    switch (type) {
        case "large_airport":
            return '<span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded">Large</span>';
        case "medium_airport":
            return '<span class="bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded">Medium</span>';
        case "small_airport":
            return '<span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">Small</span>';
        case "heliport":
            return '<span class="bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded">Heliport</span>';
        case "seaplane_base":
            return '<span class="bg-cyan-100 text-cyan-800 text-xs font-medium px-2.5 py-0.5 rounded">Seaplane</span>';
        default:
            return '<span class="bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded">Other</span>';
    }
}

const title = `Airports in ${countryName} - Live Flights & Destinations - AyaMap`;
const description = `Explore ${pagination?.total_items || 0} airports in ${countryName}. Check real-time flight departures and arrivals, view live flight status, and discover direct flight destinations from ${countryName} airports.`;
---

<Layout title={title} description={description}>
    <!-- SEO Meta Tags -->
    <meta
        name="keywords"
        content={`${countryName} airports, ${country} airports, live flights, flight departures, flight arrivals, real-time flight status, direct flights, ${countryName} aviation`}
        slot="head"
    />

    <main class="min-h-screen bg-gray-50">
        <!-- Header Section -->
        <section class="bg-white shadow-sm">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <div class="flex items-center justify-between">
                    <div>
                        <nav
                            class="flex items-center space-x-2 text-sm text-gray-500 mb-4"
                        >
                            <a href="/" class="hover:text-blue-600">Home</a>
                            <span>/</span>
                            <a href="/countries" class="hover:text-blue-600"
                                >Countries</a
                            >
                            <span>/</span>
                            <span
                                id="country-code"
                                class="font-medium text-gray-900"
                                >{country.toUpperCase()}</span
                            >
                        </nav>
                        <h1 class="text-4xl font-bold text-gray-900 mb-2">
                            Airports in {countryName}
                        </h1>
                        <p class="text-xl text-gray-600">
                            Discover {pagination?.total_items || 0} airports in {
                                countryName
                            }
                        </p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Search and Filter Section -->
        <section class="bg-white border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
                <form
                    method="GET"
                    class="flex flex-col lg:flex-row gap-4 items-center justify-between"
                >
                    <div class="flex flex-col sm:flex-row gap-4 flex-1">
                        <div class="flex-1 max-w-md">
                            <input
                                id="airport-search"
                                type="text"
                                name="q"
                                value={query}
                                placeholder="Search airports..."
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            />
                        </div>
                        <select
                            id="type-filter"
                            name="type"
                            class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                        >
                            <option value="" selected={type === ""}
                                >All Types</option
                            >
                            <option
                                value="large_airport"
                                selected={type === "large_airport"}
                                >Large Airport</option
                            >
                            <option
                                value="medium_airport"
                                selected={type === "medium_airport"}
                                >Medium Airport</option
                            >
                            <option
                                value="small_airport"
                                selected={type === "small_airport"}
                                >Small Airport</option
                            >
                            <option
                                value="heliport"
                                selected={type === "heliport"}>Heliport</option
                            >
                            <option
                                value="seaplane_base"
                                selected={type === "seaplane_base"}
                                >Seaplane Base</option
                            >
                        </select>
                    </div>
                    <div class="flex gap-2">
                        <select
                            id="sort-select"
                            name="sort"
                            class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                        >
                            <option value="name" selected={sort === "name"}
                                >Sort by Name</option
                            >
                            <option value="type" selected={sort === "type"}
                                >Sort by Type</option
                            >
                            <option
                                value="municipality"
                                selected={sort === "municipality"}
                                >Sort by City</option
                            >
                        </select>
                        <button
                            type="submit"
                            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            Search
                        </button>
                        <button
                            type="button"
                            id="view-toggle"
                            class="px-4 py-2 bg-gray-100 border border-gray-300 rounded-lg hover:bg-gray-200 transition-colors"
                        >
                            <span id="view-icon">📋</span>
                        </button>
                    </div>
                </form>
            </div>
        </section>

        <!-- Airports Section -->
        <section class="py-8">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <!-- Stats Summary -->
                <div class="bg-white rounded-lg shadow-sm p-6 mb-8">
                    <div
                        class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6 text-center"
                    >
                        <div>
                            <div class="text-3xl font-bold text-blue-600">
                                {countryStats?.airport_count || 0}
                            </div>
                            <div class="text-gray-600">Total Airports</div>
                        </div>
                        <div>
                            <div class="text-3xl font-bold text-green-600">
                                {countryStats?.large_airport_count || 0}
                            </div>
                            <div class="text-gray-600">Large Airports</div>
                        </div>
                        <div>
                            <div class="text-3xl font-bold text-yellow-600">
                                {countryStats?.medium_airport_count || 0}
                            </div>
                            <div class="text-gray-600">Medium Airports</div>
                        </div>
                        <div>
                            <div class="text-3xl font-bold text-purple-600">
                                {countryStats?.small_airport_count || 0}
                            </div>
                            <div class="text-gray-600">Small Airports</div>
                        </div>
                        <div>
                            <div class="text-3xl font-bold text-orange-600">
                                {countryStats?.heliport_count || 0}
                            </div>
                            <div class="text-gray-600">Heliports</div>
                        </div>
                        <div>
                            <div class="text-3xl font-bold text-cyan-600">
                                {countryStats?.seaplane_base_count || 0}
                            </div>
                            <div class="text-gray-600">Seaplane Bases</div>
                        </div>
                    </div>
                </div>

                <!-- Airports Grid -->
                <div
                    id="airports-grid"
                    class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                >
                    {
                        airports.map((airport) => (
                            <div class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-6 flex flex-col h-full">
                                <div class="flex items-start justify-between mb-4">
                                    <div class="flex-1">
                                        <h3 class="text-lg font-semibold text-gray-900 mb-1">
                                            {airport.name || airport.ident}
                                        </h3>
                                        <p class="text-sm text-gray-600">
                                            {airport.municipality ||
                                                "Unknown City"}
                                        </p>
                                    </div>
                                    <div class="flex flex-col items-end gap-2">
                                        <span class="bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded">
                                            {airport.ident}
                                        </span>
                                        <Fragment
                                            set:html={getTypeBadge(
                                                airport.type,
                                            )}
                                        />
                                    </div>
                                </div>
                                <div class="space-y-2 mb-4 flex-grow">
                                    {airport.latitude_deg &&
                                        airport.longitude_deg && (
                                            <div class="text-sm text-gray-600">
                                                📍{" "}
                                                {airport.latitude_deg.toFixed(
                                                    4,
                                                )}
                                                ,{" "}
                                                {airport.longitude_deg.toFixed(
                                                    4,
                                                )}
                                            </div>
                                        )}
                                    {airport.elevation_ft && (
                                        <div class="text-sm text-gray-600">
                                            ⛰️ {airport.elevation_ft} ft
                                            elevation
                                        </div>
                                    )}
                                </div>
                                <div class="flex gap-2 mt-auto">
                                    <a
                                        href={`/airports/${airport.ident}`}
                                        class="flex-1 bg-blue-600 text-white text-center py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                                    >
                                        View Details
                                    </a>
                                    {airport.home_link && (
                                        <a
                                            href={airport.home_link}
                                            target="_blank"
                                            class="bg-gray-100 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium"
                                        >
                                            🔗
                                        </a>
                                    )}
                                </div>
                            </div>
                        ))
                    }
                </div>

                <!-- Airports Table (Alternative View) -->
                <div
                    id="airports-table"
                    class="hidden bg-white rounded-lg shadow-sm overflow-hidden"
                >
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                                    >Airport</th
                                >
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                                    >Code</th
                                >
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                                    >Type</th
                                >
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                                    >City</th
                                >
                                <th
                                    class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                                    >Actions</th
                                >
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            {
                                airports.map((airport) => (
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-gray-900">
                                                {airport.name || airport.ident}
                                            </div>
                                            <div class="text-sm text-gray-500">
                                                {airport.municipality ||
                                                    "Unknown City"}
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">
                                                {airport.ident}
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <Fragment
                                                set:html={getTypeBadge(
                                                    airport.type,
                                                )}
                                            />
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                            {airport.municipality || "-"}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                            <a
                                                href={`/airports/${airport.ident}`}
                                                class="text-blue-600 hover:text-blue-900 mr-3"
                                            >
                                                Details
                                            </a>
                                            {airport.home_link && (
                                                <a
                                                    href={airport.home_link}
                                                    target="_blank"
                                                    class="text-gray-600 hover:text-gray-900"
                                                >
                                                    🔗
                                                </a>
                                            )}
                                        </td>
                                    </tr>
                                ))
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                {
                    pagination && pagination.total_pages > 1 && (
                        <div class="mt-8 flex items-center justify-between">
                            <div class="text-sm text-gray-700">
                                Showing{" "}
                                {(pagination.current_page - 1) *
                                    pagination.per_page +
                                    1}{" "}
                                to{" "}
                                {Math.min(
                                    pagination.current_page *
                                        pagination.per_page,
                                    pagination.total_items,
                                )}{" "}
                                of {pagination.total_items} results
                            </div>
                            <div class="flex items-center space-x-2">
                                {pagination.current_page > 1 && (
                                    <a
                                        href={buildUrl({
                                            page: pagination.current_page - 1,
                                        })}
                                        class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                                    >
                                        Previous
                                    </a>
                                )}

                                <span class="px-3 py-2 text-sm font-medium bg-blue-600 text-white rounded-md">
                                    {pagination.current_page}
                                </span>
                                <span class="px-3 py-2 text-sm text-gray-500">
                                    of {pagination.total_pages}
                                </span>

                                {pagination.current_page <
                                    pagination.total_pages && (
                                    <a
                                        href={buildUrl({
                                            page: pagination.current_page + 1,
                                        })}
                                        class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                                    >
                                        Next
                                    </a>
                                )}
                            </div>
                        </div>
                    )
                }
            </div>
        </section>

        <!-- Error State -->
        <section id="error-section" class="hidden py-12">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="text-center">
                    <div class="text-red-500 text-6xl mb-4">⚠️</div>
                    <h2 class="text-2xl font-bold text-gray-900 mb-2">
                        Failed to Load Airports
                    </h2>
                    <p class="text-gray-600 mb-4">
                        There was an error loading the airports data for this
                        country.
                    </p>
                    <button
                        id="retry-btn"
                        class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                    >
                        Try Again
                    </button>
                </div>
            </div>
        </section>
    </main>
</Layout>

<script define:vars={{ country }}>
    // Simple client-side functionality for view toggle
    document.addEventListener("DOMContentLoaded", () => {
        // View toggle functionality
        const viewToggle = document.getElementById("view-toggle");
        const viewOnMapBtn = document.getElementById("view-on-map");

        if (viewToggle) {
            viewToggle.addEventListener("click", toggleView);
        }

        if (viewOnMapBtn) {
            viewOnMapBtn.addEventListener("click", () => {
                window.location.href = `/?country=${country}`;
            });
        }
    });

    function toggleView() {
        const airportsGrid = document.getElementById("airports-grid");
        const airportsTable = document.getElementById("airports-table");
        const viewIcon = document.getElementById("view-icon");

        if (airportsGrid && airportsTable && viewIcon) {
            if (airportsGrid.classList.contains("hidden")) {
                // Show grid, hide table
                airportsGrid.classList.remove("hidden");
                airportsTable.classList.add("hidden");
                viewIcon.textContent = "📋";
            } else {
                // Show table, hide grid
                airportsGrid.classList.add("hidden");
                airportsTable.classList.remove("hidden");
                viewIcon.textContent = "🔲";
            }
        }
    }
</script>
