---
import Layout from '../../layouts/Layout.astro';
import { AirportDatabase } from '../../lib/database';

const db = (Astro.locals as any).runtime?.env?.DB;
if (!db) {
	throw new Error('Database not available');
}

const airportDb = new AirportDatabase(db);
const countries = await airportDb.getCountryStats();

// Calculate global stats similar to airports page
const stats = {
	total: countries.reduce((sum, country) => sum + country.airport_count, 0),
	large: countries.reduce((sum, country) => sum + (country.large_airport_count || 0), 0),
	medium: countries.reduce((sum, country) => sum + (country.medium_airport_count || 0), 0),
	small: countries.reduce((sum, country) => sum + (country.small_airport_count || 0), 0),
	countries: countries.length
};

const title = 'Countries - AyaMap Airports';
const description = 'Browse airports by country. Explore aviation infrastructure across different nations and territories worldwide.';
const canonicalUrl = 'https://airport.ayamap.com/countries';
---

<Layout title={title}>
	<!-- SEO Meta Tags -->
	<meta name="description" content={description} slot="head" />
	<meta name="keywords" content="airports by country, world airports, aviation, international airports, country airports" slot="head" />
	<link rel="canonical" href={canonicalUrl} slot="head" />
	
	<!-- Open Graph Meta Tags -->
	<meta property="og:title" content={title} slot="head" />
	<meta property="og:description" content={description} slot="head" />
	<meta property="og:url" content={canonicalUrl} slot="head" />
	<meta property="og:type" content="website" slot="head" />
	
	<!-- Structured Data -->
	<script type="application/ld+json" slot="head">
	{
		"@context": "https://schema.org",
		"@type": "CollectionPage",
		"name": "Airport Countries Directory",
		"description": "Directory of airports organized by country",
		"url": "https://airport.ayamap.com/countries",
		"mainEntity": {
			"@type": "ItemList",
			"numberOfItems": countries.length,
			"itemListElement": countries.slice(0, 10).map((country, index) => ({
				"@type": "ListItem",
				"position": index + 1,
				"item": {
					"@type": "Place",
					"name": country.country_name || country.country,
					"url": `https://airport.ayamap.com/countries/${country.country?.toLowerCase()}`
				}
			}))
		}
	}
	</script>

	<main class="min-h-screen bg-gray-50">
		<!-- Header Section -->
		<section class="bg-white shadow-sm">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<div class="text-center">
					<h1 class="text-4xl font-bold text-gray-900 mb-4">
						Countries & Territories
					</h1>
					<p class="text-xl text-gray-600 mb-6">
						Explore airports by country and discover aviation infrastructure worldwide
					</p>
				</div>
				
				<!-- Stats Section -->
				<div class="grid grid-cols-2 md:grid-cols-5 gap-4 mt-8">
					<div class="bg-blue-50 p-4 rounded-lg text-center">
						<div class="text-2xl font-bold text-blue-600">{stats.total.toLocaleString()}</div>
						<div class="text-sm text-gray-600">Total Airports</div>
					</div>
					<div class="bg-green-50 p-4 rounded-lg text-center">
						<div class="text-2xl font-bold text-green-600">{stats.large.toLocaleString()}</div>
						<div class="text-sm text-gray-600">Large Airports</div>
					</div>
					<div class="bg-yellow-50 p-4 rounded-lg text-center">
						<div class="text-2xl font-bold text-yellow-600">{stats.medium.toLocaleString()}</div>
						<div class="text-sm text-gray-600">Medium Airports</div>
					</div>
					<div class="bg-purple-50 p-4 rounded-lg text-center">
						<div class="text-2xl font-bold text-purple-600">{stats.small.toLocaleString()}</div>
						<div class="text-sm text-gray-600">Small Airports</div>
					</div>
					<div class="bg-gray-50 p-4 rounded-lg text-center">
						<div class="text-2xl font-bold text-gray-600">{stats.countries.toLocaleString()}</div>
						<div class="text-sm text-gray-600">Countries</div>
					</div>
				</div>
			</div>
		</section>

		<!-- Search and Filter Section -->
		<section class="bg-white border-b border-gray-200">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
				<div class="flex flex-col sm:flex-row gap-4 items-center justify-between">
					<div class="flex-1 max-w-md">
						<input 
							type="text" 
							id="country-search" 
							placeholder="Search countries..."
							class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						/>
					</div>
					<div class="flex gap-2">
						<select id="sort-select" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
							<option value="name">Sort by Name</option>
							<option value="airports">Sort by Airport Count</option>
						</select>
						<button id="view-toggle" class="px-4 py-2 bg-gray-100 border border-gray-300 rounded-lg hover:bg-gray-200 transition-colors">
							<span id="view-icon">📋</span>
						</button>
					</div>
				</div>
			</div>
		</section>

		<!-- Countries Grid -->
		<section id="countries-section" class="py-8">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Countries List -->
				<div id="countries-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
					{countries.map(country => (
						<div class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-6 country-card" 
							 data-country={country.country} 
							 data-country-name={country.country_name || country.country}
							 data-airport-count={country.airport_count}>
							<div class="flex items-center justify-between mb-4">
								<div class="flex items-center gap-3">
									<span class="text-2xl country-flag" data-code={country.country}></span>
									<h3 class="text-lg font-semibold text-gray-900">{country.country_name || country.country}</h3>
								</div>
								<span class="bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded">{country.country}</span>
							</div>
							<div class="mb-4">
								<div class="text-3xl font-bold text-blue-600 mb-1">{country.airport_count.toLocaleString()}</div>
								<div class="text-sm text-gray-600">Airport{country.airport_count !== 1 ? 's' : ''}</div>
							</div>
							<div class="flex gap-2">
								<a href={`/countries/${country.country}`} class="flex-1 bg-blue-600 text-white text-center py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium">
									View Airports
								</a>
							</div>
						</div>
					))}
				</div>

				<!-- Countries Table (Alternative View) -->
				<div id="countries-table" class="hidden bg-white rounded-lg shadow-sm overflow-hidden">
					<table class="min-w-full divide-y divide-gray-200">
						<thead class="bg-gray-50">
							<tr>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Country</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Code</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Airports</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
							</tr>
						</thead>
						<tbody id="countries-table-body" class="bg-white divide-y divide-gray-200">
							{countries.map(country => (
								<tr class="hover:bg-gray-50 country-row" 
									data-country={country.country} 
									data-country-name={country.country_name || country.country}
									data-airport-count={country.airport_count}>
									<td class="px-6 py-4 whitespace-nowrap">
										<div class="flex items-center gap-3">
											<span class="text-xl country-flag" data-code={country.country}></span>
											<div class="text-sm font-medium text-gray-900">{country.country_name || country.country}</div>
										</div>
									</td>
									<td class="px-6 py-4 whitespace-nowrap">
										<span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">{country.country}</span>
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
										{country.airport_count.toLocaleString()}
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
										<a href={`/countries/${country.country}`} class="text-blue-600 hover:text-blue-900">View Airports</a>
									</td>
								</tr>
							))}
						</tbody>
					</table>
				</div>
			</div>
		</section>
	</main>
</Layout>

<script>
	interface CountryStats {
		country: string;
		country_name: string | null;
		airport_count: number;
	}

	let isGridView = true;

	// Function to get country flag emoji
	function getCountryFlag(countryCode: string): string {
		if (!countryCode || countryCode.length !== 2) return '🏳️';
		
		// Convert country code to flag emoji
		const codePoints = countryCode
			.toUpperCase()
			.split('')
			.map(char => 127397 + char.charCodeAt(0));
		
		return String.fromCodePoint(...codePoints);
	}

	// DOM elements
	const countriesGrid = document.getElementById('countries-grid')!;
	const countriesTable = document.getElementById('countries-table')!;
	const countrySearch = document.getElementById('country-search') as HTMLInputElement;
	const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
	const viewToggle = document.getElementById('view-toggle')!;
	const viewIcon = document.getElementById('view-icon')!;

	// Get all country elements
	function getAllCountryElements(): { cards: HTMLElement[], rows: HTMLElement[] } {
		const cards = Array.from(document.querySelectorAll('.country-card')) as HTMLElement[];
		const rows = Array.from(document.querySelectorAll('.country-row')) as HTMLElement[];
		return { cards, rows };
	}

	// Sort countries
	function sortCountries() {
		const sortBy = sortSelect.value;
		const { cards, rows } = getAllCountryElements();
		
		// Sort cards
		const sortedCards = cards.sort((a, b) => {
			if (sortBy === 'airports') {
				const countA = parseInt(a.dataset.airportCount || '0');
				const countB = parseInt(b.dataset.airportCount || '0');
				return countB - countA;
			} else {
				const nameA = a.dataset.countryName || '';
				const nameB = b.dataset.countryName || '';
				return nameA.localeCompare(nameB);
			}
		});
		
		// Sort rows
		const sortedRows = rows.sort((a, b) => {
			if (sortBy === 'airports') {
				const countA = parseInt(a.dataset.airportCount || '0');
				const countB = parseInt(b.dataset.airportCount || '0');
				return countB - countA;
			} else {
				const nameA = a.dataset.countryName || '';
				const nameB = b.dataset.countryName || '';
				return nameA.localeCompare(nameB);
			}
		});
		
		// Re-append sorted elements
		sortedCards.forEach(card => countriesGrid.appendChild(card));
		const tableBody = document.getElementById('countries-table-body')!;
		sortedRows.forEach(row => tableBody.appendChild(row));
	}

	// Filter countries
	function filterCountries() {
		const query = countrySearch.value.toLowerCase().trim();
		const { cards, rows } = getAllCountryElements();
		
		cards.forEach(card => {
			const countryName = (card.dataset.countryName || '').toLowerCase();
			const countryCode = (card.dataset.country || '').toLowerCase();
			const matches = !query || countryName.includes(query) || countryCode.includes(query);
			card.style.display = matches ? 'block' : 'none';
		});
		
		rows.forEach(row => {
			const countryName = (row.dataset.countryName || '').toLowerCase();
			const countryCode = (row.dataset.country || '').toLowerCase();
			const matches = !query || countryName.includes(query) || countryCode.includes(query);
			row.style.display = matches ? 'table-row' : 'none';
		});
	}

	// Toggle view
	function toggleView() {
		isGridView = !isGridView;
		
		if (isGridView) {
			countriesGrid.classList.remove('hidden');
			countriesTable.classList.add('hidden');
			viewIcon.textContent = '📋';
		} else {
			countriesGrid.classList.add('hidden');
			countriesTable.classList.remove('hidden');
			viewIcon.textContent = '🔲';
		}
	}

	// Initialize country flags
	function initializeFlags() {
		const flagElements = document.querySelectorAll('.country-flag');
		flagElements.forEach(element => {
			const countryCode = element.getAttribute('data-code');
			if (countryCode) {
				element.textContent = getCountryFlag(countryCode);
			}
		});
	}

	// Event listeners
	countrySearch.addEventListener('input', filterCountries);
	sortSelect.addEventListener('change', sortCountries);
	viewToggle.addEventListener('click', toggleView);

	// Initialize
	document.addEventListener('DOMContentLoaded', () => {
		initializeFlags();
	});
</script>