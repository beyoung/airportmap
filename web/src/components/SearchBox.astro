---
/**
 * Airport Search Component
 * Provides search functionality with autocomplete
 */
---

<div class="search-container">
  <div class="search-box">
    <input 
      type="text" 
      id="airport-search" 
      placeholder="Search airports by name, code, or city..."
      class="airport-search-input"
      autocomplete="off"
    />
    <button type="button" id="search-btn" class="search-button">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </button>
  </div>
  
  <div id="search-results" class="search-results hidden">
    <div class="results-header">
      <span id="results-count">0 results</span>
      <button type="button" id="clear-results" class="clear-button">Clear</button>
    </div>
    <div id="results-list" class="results-list">
      <!-- Results will be populated here -->
    </div>
    <div id="results-loading" class="results-loading hidden">
      <div class="loading-spinner"></div>
      <span>Searching...</span>
    </div>
  </div>
</div>

<script>
  let searchTimeout: number;
  let currentQuery = '';
  
  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    initializeSearch();
  });
  
  // Also try to initialize immediately in case DOMContentLoaded already fired
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSearch);
  } else {
    initializeSearch();
  }
  
  function initializeSearch() {
    const searchInput = document.getElementById('airport-search') as HTMLInputElement;
    const searchBtn = document.getElementById('search-btn') as HTMLButtonElement;
    const searchResults = document.getElementById('search-results') as HTMLElement;
    const resultsCount = document.getElementById('results-count') as HTMLElement;
    const resultsList = document.getElementById('results-list') as HTMLElement;
    const resultsLoading = document.getElementById('results-loading') as HTMLElement;
    const clearBtn = document.getElementById('clear-results') as HTMLButtonElement;
    
    // Check if elements exist
    if (!searchInput || !searchBtn || !searchResults || !resultsCount || !resultsList || !resultsLoading || !clearBtn) {
      console.error('SearchBox: Required elements not found');
      return;
    }
    
    // Debug: Check if input is accessible and focusable
    console.log('SearchBox: Input element found:', searchInput);
    console.log('SearchBox: Input disabled?', searchInput.disabled);
    console.log('SearchBox: Input readonly?', searchInput.readOnly);
    console.log('SearchBox: Input tabIndex:', searchInput.tabIndex);
    
    // Force focus and test input
    searchInput.addEventListener('focus', () => {
      console.log('SearchBox: Input focused successfully');
    });
    
    searchInput.addEventListener('blur', () => {
      console.log('SearchBox: Input lost focus');
    });
    
    // Test click on input
    searchInput.addEventListener('click', () => {
      console.log('SearchBox: Input clicked');
      searchInput.focus();
    });
    
    // Force enable input and make it focusable
    searchInput.disabled = false;
    searchInput.readOnly = false;
    searchInput.tabIndex = 0;
    
    // Try to focus the input after a short delay
    setTimeout(() => {
      console.log('SearchBox: Attempting to focus input');
      searchInput.focus();
      console.log('SearchBox: Input focused, activeElement:', document.activeElement);
    }, 100);
    
    // Add mousedown event to ensure input gets focus
    searchInput.addEventListener('mousedown', (e) => {
      console.log('SearchBox: Mousedown on input');
      e.preventDefault();
      searchInput.focus();
      e.stopPropagation();
    });
    
    // Search function
    async function searchAirports(query: string) {
      if (!query.trim() || query === currentQuery) return;
      
      currentQuery = query;
      
      // Show loading
      resultsLoading.classList.remove('hidden');
      searchResults.classList.remove('hidden');
      
      try {
        const response = await fetch(`/api/airports/search?${new URLSearchParams({
          q: query,
          limit: '20'
        })}`);
        
        if (!response.ok) {
          throw new Error('Search failed');
        }
        
        const data: any = await response.json();
        displayResults(data.airports || [], data.total || 0);
        
      } catch (error) {
        console.error('Search error:', error);
        displayError('Search failed. Please try again.');
      } finally {
        resultsLoading.classList.add('hidden');
      }
    }
    
    // Display search results
    function displayResults(airports: any[], total: number) {
      resultsCount.textContent = `${total} result${total !== 1 ? 's' : ''}`;
      
      if (airports.length === 0) {
        resultsList.innerHTML = '<div class="no-results">No airports found</div>';
        return;
      }
      
      resultsList.innerHTML = airports.map(airport => `
        <div class="result-item" data-lat="${airport.latitude_deg}" data-lng="${airport.longitude_deg}" data-code="${airport.ident}">
          <div class="result-main">
            <h3 class="result-name">${airport.name}</h3>
            <p class="result-details">
              <span class="result-code">${airport.ident}</span>
              <span class="result-type">${airport.type}</span>
            </p>
            <p class="result-location">${airport.municipality || 'Unknown'}, ${airport.iso_country}</p>
          </div>
          <div class="result-actions">
            <button type="button" class="show-on-map-btn" data-lat="${airport.latitude_deg}" data-lng="${airport.longitude_deg}">
              Show on Map
            </button>
            <a href="/airports/${airport.ident}" class="view-details-btn">Details</a>
          </div>
        </div>
      `).join('');
      
      // Add click handlers for "Show on Map" buttons
      document.querySelectorAll('.show-on-map-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const lat = parseFloat(target.dataset.lat || '0');
          const lng = parseFloat(target.dataset.lng || '0');
          
          // Use the global map instance to fly to location
          const map = (window as any).airportMap;
          if (map) {
            map.flyTo({
              center: [lng, lat],
              zoom: 12,
              duration: 2000
            });
            
            // Hide search results
            searchResults.classList.add('hidden');
            searchInput.value = '';
            currentQuery = '';
          }
        });
      });
    }
    
    // Display error message
    function displayError(message: string) {
      resultsCount.textContent = 'Error';
      resultsList.innerHTML = `<div class="error-message">${message}</div>`;
    }
    
    // Clear search results
    function clearResults() {
      searchResults.classList.add('hidden');
      searchInput.value = '';
      currentQuery = '';
      resultsList.innerHTML = '';
    }
  
    // Event listeners
    searchInput.addEventListener('input', (e) => {
      console.log('SearchBox: Input event triggered, value:', (e.target as HTMLInputElement).value);
      const query = (e.target as HTMLInputElement).value;
      
      clearTimeout(searchTimeout);
      
      if (query.trim().length < 2) {
        clearResults();
        return;
      }
      
      searchTimeout = setTimeout(() => {
        searchAirports(query);
      }, 300) as any;
    });
    
    // Additional debug event listeners
    searchInput.addEventListener('keydown', (e) => {
      console.log('SearchBox: Keydown event:', e.key, 'Value before:', searchInput.value);
    });
    
    searchInput.addEventListener('keyup', (e) => {
      console.log('SearchBox: Keyup event:', e.key, 'Value after:', searchInput.value);
    });
    
    searchInput.addEventListener('change', (e) => {
      console.log('SearchBox: Change event, value:', (e.target as HTMLInputElement).value);
    });
    
    searchBtn.addEventListener('click', () => {
      const query = searchInput.value;
      if (query.trim()) {
        searchAirports(query);
      }
    });
    
    clearBtn.addEventListener('click', clearResults);
    
    // Close results when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (!target.closest('.search-container')) {
        searchResults.classList.add('hidden');
      }
    });
    
    // Handle Enter key
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        const query = searchInput.value;
        if (query.trim()) {
          searchAirports(query);
        }
      }
    });
  }
</script>

<style>
  .search-container {
    position: relative;
    width: 100%;
    max-width: 500px;
  }
  
  .search-box {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .airport-search-input {
    width: 100%;
    padding: 0.75rem 3rem 0.75rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: border-color 0.2s;
    background: white;
    color: #111827;
    z-index: 1;
    position: relative;
    pointer-events: auto;
    user-select: text;
    -webkit-user-select: text;
    -moz-user-select: text;
    -ms-user-select: text;
  }
  
  .search-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  .search-button {
    position: absolute;
    right: 0.5rem;
    padding: 0.5rem;
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
    border-radius: 0.25rem;
    transition: color 0.2s;
  }
  
  .search-button:hover {
    color: #3b82f6;
  }
  
  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    max-height: 400px;
    overflow: hidden;
    margin-top: 0.25rem;
  }
  
  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #e5e7eb;
    background: #f9fafb;
    font-size: 0.875rem;
    color: #6b7280;
  }
  
  .clear-button {
    background: none;
    border: none;
    color: #3b82f6;
    cursor: pointer;
    font-size: 0.875rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.2s;
  }
  
  .clear-button:hover {
    background: #e5e7eb;
  }
  
  .results-list {
    max-height: 320px;
    overflow-y: auto;
  }
  
  .result-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid #f3f4f6;
    transition: background-color 0.2s;
  }
  
  .result-item:hover {
    background: #f9fafb;
  }
  
  .result-item:last-child {
    border-bottom: none;
  }
  
  .result-main {
    flex: 1;
  }
  
  .result-name {
    font-weight: 600;
    color: #111827;
    margin-bottom: 0.25rem;
  }
  
  .result-details {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 0.25rem;
    font-size: 0.875rem;
  }
  
  .result-code {
    background: #3b82f6;
    color: white;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-weight: 500;
  }
  
  .result-type {
    color: #6b7280;
    text-transform: capitalize;
  }
  
  .result-location {
    color: #6b7280;
    font-size: 0.875rem;
  }
  
  .result-actions {
    display: flex;
    gap: 0.5rem;
    flex-shrink: 0;
  }
  
  .show-on-map-btn {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.5rem 0.75rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .show-on-map-btn:hover {
    background: #2563eb;
  }
  
  .view-details-btn {
    background: #f3f4f6;
    color: #374151;
    border: none;
    padding: 0.5rem 0.75rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    text-decoration: none;
    transition: background-color 0.2s;
  }
  
  .view-details-btn:hover {
    background: #e5e7eb;
  }
  
  .results-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 1rem;
    color: #6b7280;
  }
  
  .loading-spinner {
    width: 1rem;
    height: 1rem;
    border: 2px solid #e5e7eb;
    border-top: 2px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  .no-results {
    padding: 2rem;
    text-align: center;
    color: #6b7280;
  }
  
  .error-message {
    padding: 1rem;
    text-align: center;
    color: #dc2626;
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 0.25rem;
    margin: 1rem;
  }
  
  .hidden {
    display: none;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>