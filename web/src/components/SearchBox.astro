---
/**
 * Airport Search Component
 * Provides search functionality with autocomplete
 */
---

<div class="search-container">
  <div class="search-box">
    <input 
      type="text" 
      id="airport-search" 
      placeholder="Search airports by name, code, or city..."
      class="airport-search-input"
      autocomplete="off"
    />
    <button type="button" id="search-btn" class="search-button">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </button>
  </div>
  
  <div id="search-results" class="search-results hidden">
    <div class="results-header">
      <span id="results-count">0 results</span>
      <button type="button" id="clear-results" class="clear-button">Clear</button>
    </div>
    <div id="results-list" class="results-list">
      <!-- Results will be populated here -->
    </div>
    <div id="results-loading" class="results-loading hidden">
      <div class="loading-spinner"></div>
      <span>Searching...</span>
    </div>
  </div>
</div>

<script>
  let searchTimeout: number;
  let currentQuery = '';
  
  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    initializeSearch();
  });
  
  // Also try to initialize immediately in case DOMContentLoaded already fired
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSearch);
  } else {
    initializeSearch();
  }
  
  function initializeSearch() {
    const searchInput = document.getElementById('airport-search') as HTMLInputElement;
    const searchBtn = document.getElementById('search-btn') as HTMLButtonElement;
    const searchResults = document.getElementById('search-results') as HTMLElement;
    const resultsCount = document.getElementById('results-count') as HTMLElement;
    const resultsList = document.getElementById('results-list') as HTMLElement;
    const resultsLoading = document.getElementById('results-loading') as HTMLElement;
    const clearBtn = document.getElementById('clear-results') as HTMLButtonElement;
    
    // Check if elements exist
    if (!searchInput || !searchBtn || !searchResults || !resultsCount || !resultsList || !resultsLoading || !clearBtn) {
      return;
    }
    
    searchInput.addEventListener('click', () => {
      searchInput.focus();
    });
    
    // Force enable input and make it focusable
    searchInput.disabled = false;
    searchInput.readOnly = false;
    searchInput.tabIndex = 0;
    
    // Try to focus the input after a short delay
    setTimeout(() => {
      searchInput.focus();
    }, 100);
    
    // Add click event to ensure input gets focus
    searchInput.addEventListener('click', (e) => {
      searchInput.focus();
    });
    
    // Search function
    async function searchAirports(query: string) {
      if (!query.trim() || query === currentQuery) return;
      
      currentQuery = query;
      
      // Show loading
      resultsLoading.classList.remove('hidden');
      searchResults.classList.remove('hidden');
      
      try {
        const response = await fetch(`/api/airports/search?${new URLSearchParams({
          q: query,
          limit: '20'
        })}`);
        
        if (!response.ok) {
          throw new Error('Search failed');
        }
        
        const data: any = await response.json();
        displayResults(data.airports || [], data.total || 0);
        
      } catch (error) {
        displayError('Search failed. Please try again.');
      } finally {
        resultsLoading.classList.add('hidden');
      }
    }
    
    // Get country flag emoji
  function getCountryFlag(countryCode: string): string {
    const flags: { [key: string]: string } = {
      'US': '🇺🇸', 'CN': '🇨🇳', 'GB': '🇬🇧', 'DE': '🇩🇪', 'FR': '🇫🇷', 'JP': '🇯🇵', 'IN': '🇮🇳',
      'IT': '🇮🇹', 'BR': '🇧🇷', 'CA': '🇨🇦', 'AU': '🇦🇺', 'RU': '🇷🇺', 'KR': '🇰🇷', 'ES': '🇪🇸',
      'MX': '🇲🇽', 'ID': '🇮🇩', 'NL': '🇳🇱', 'SA': '🇸🇦', 'TR': '🇹🇷', 'TW': '🇹🇼', 'CH': '🇨🇭',
      'BE': '🇧🇪', 'AR': '🇦🇷', 'IE': '🇮🇪', 'AT': '🇦🇹', 'CL': '🇨🇱', 'DK': '🇩🇰', 'FI': '🇫🇮',
      'NO': '🇳🇴', 'PL': '🇵🇱', 'PT': '🇵🇹', 'SE': '🇸🇪', 'TH': '🇹🇭', 'VN': '🇻🇳', 'MY': '🇲🇾',
      'SG': '🇸🇬', 'PH': '🇵🇭', 'AE': '🇦🇪', 'ZA': '🇿🇦', 'EG': '🇪🇬', 'NG': '🇳🇬', 'KE': '🇰🇪'
    };
    return flags[countryCode.toUpperCase()] || '🏳️';
  }

  // Display search results
    function displayResults(airports: any[], total: number) {
      resultsCount.textContent = `${total} result${total !== 1 ? 's' : ''}`;
      
      if (airports.length === 0) {
        resultsList.innerHTML = '<div class="no-results">No airports found</div>';
        return;
      }
      
      resultsList.innerHTML = airports.map(airport => `
        <a href="/airports/${airport.ident}" target="_blank" class="result-item" data-code="${airport.ident}">
          <div class="result-content">
            <div class="result-line1">
              <span class="flag">${getCountryFlag(airport.iso_country)}</span>
              <span class="name">${airport.name}</span>
            </div>
            <div class="result-line2">
              <span class="code">${airport.ident}</span>
              <span class="location">${airport.municipality || 'Unknown City'}, ${airport.iso_country}</span>
              <span class="type">${airport.type.replace('_', ' ')}</span>
            </div>
          </div>
        </a>
      `).join('');
    }
    
    // Display error message
    function displayError(message: string) {
      resultsCount.textContent = 'Error';
      resultsList.innerHTML = `<div class="error-message">${message}</div>`;
    }
    
    // Clear search results
    function clearResults() {
      searchResults.classList.add('hidden');
      currentQuery = '';
      resultsList.innerHTML = '';
    }
  
    // Event listeners for input
    searchInput.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value;
      
      clearTimeout(searchTimeout);
      
      if (query.trim().length < 2) {
        searchResults.classList.add('hidden');
        resultsList.innerHTML = '';
        return;
      }
      
      searchTimeout = setTimeout(() => {
        searchAirports(query);
      }, 300) as any;
    });
    
    searchBtn.addEventListener('click', () => {
      const query = searchInput.value;
      if (query.trim()) {
        searchAirports(query);
      }
    });
    
    clearBtn.addEventListener('click', clearResults);
    
    // Close results when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (!target.closest('.search-container')) {
        searchResults.classList.add('hidden');
      }
    });
    
    // Handle Enter key for search
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        const query = searchInput.value;
        if (query.trim()) {
          searchAirports(query);
        }
      }
    });
  }
</script>

<style is:global>
  .search-container {
    position: relative;
    width: 100%;
    max-width: 500px;
  }
  
  .search-box {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .airport-search-input {
    width: 100%;
    padding: 0.75rem 3rem 0.75rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: border-color 0.2s;
    background: white;
    color: #111827;
    z-index: 1;
    position: relative;
    pointer-events: auto;
    user-select: text;
    -webkit-user-select: text;
    -moz-user-select: text;
    -ms-user-select: text;
  }
  
  .airport-search-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  .search-button {
    position: absolute;
    right: 0.5rem;
    padding: 0.5rem;
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
    border-radius: 0.25rem;
    transition: color 0.2s;
  }
  
  .search-button:hover {
    color: #3b82f6;
  }
  
  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    max-height: 400px;
    overflow: hidden;
    margin-top: 0.25rem;
  }
  
  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #e5e7eb;
    background: #f9fafb;
    font-size: 0.875rem;
    color: #6b7280;
  }
  
  .clear-button {
    background: none;
    border: none;
    color: #3b82f6;
    cursor: pointer;
    font-size: 0.875rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.2s;
  }
  
  .clear-button:hover {
    background: #e5e7eb;
  }
  
  .results-list {
    max-height: 320px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: 0;               /* 取消卡片式间隔，改用横线分隔 */
    padding: 0 0 1rem 0;  /* 增加底部内边距，避免与横线重合 */
    text-align: left !important;
  }
  
  .result-item {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
    padding: 0rem 1rem;
    width: 100%;
    border: none;
    border-top: 1px solid #e5e7eb;  /* 用横线分隔 */
    border-radius: 0;                /* 去除圆角，保持列表风格 */
    transition: background 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
    text-decoration: none;
    color: inherit;
    cursor: pointer;
    position: relative;
    background: white;
    min-height: 56px;
    text-align: left !important;
  }

  .result-item:first-child {
    border-top: none; /* 顶部不画线 */
  }

  .result-item:hover {
    background: #f8fafc;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
  }

  .result-content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    gap: 0.25rem;
    text-align: left !important;
    width: 100%;
  }

  .result-line1,
  .result-line2 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: nowrap;
    justify-content: flex-start;
    width: 100%;
    text-align: left !important;
  }

  .result-line1 {
    font-size: 0.9rem;
    font-weight: 600;
    color: #1e293b;
  }

  .result-line2 {
    font-size: 0.8rem;
    color: #64748b;
    padding-left: calc(1.25rem + 0.5rem); /* 为国旗预留的缩进 + 与名称间的间距 */
  }

  .flag {
    font-size: 1rem;
    flex-shrink: 0;
    display: inline-block;
    width: 1.25rem;           /* 固定国旗占位宽度，供第二行对齐使用 */
    text-align: center;
  }

  .name {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    flex: 1;                  /* 让机场名字占据剩余空间 */
    min-width: 0;             /* 允许收缩 */
    text-align: left;
  }

  .code {
    font-family: 'Courier New', monospace;
    font-weight: 500;
    color: #475569;
    background: #f1f5f9;
    padding: 0.1rem 0.4rem;
    border-radius: 0.2rem;
    flex-shrink: 0;
  }

  .location {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    flex: 1;                  /* 让位置信息占据剩余空间 */
    min-width: 0;             /* 允许收缩 */
    text-align: left;
  }

  .type {
    flex-shrink: 0;
    text-transform: capitalize;
    text-align: left;
    font-family: 'Courier New', monospace;  /* 与code保持一致的字体 */
    font-weight: 500;
    color: #059669;           /* 绿色主题 */
    background: #ecfdf5;      /* 浅绿色背景 */
    padding: 0.1rem 0.4rem;   /* 与code相同的内边距 */
    border-radius: 0.2rem;    /* 与code相同的圆角 */
    font-size: 0.75rem;       /* 稍小的字体 */
  }
  
  .result-item {
    /* legacy block removed to avoid overriding latest list design */
  }
  
  .result-item:hover {
    /* legacy hover removed */
  }
  
  .result-item:focus-visible,
  .result-item:focus-within {
    outline: none;
    background: #eef2ff;
    box-shadow: inset 3px 0 0 #6366f1, 0 1px 4px rgba(0,0,0,0.06);
  }
  
  .results-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 1rem;
    color: #6b7280;
  }
  
  .loading-spinner {
    width: 1rem;
    height: 1rem;
    border: 2px solid #e5e7eb;
    border-top: 2px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  .no-results {
    padding: 2rem;
    text-align: center;
    color: #6b7280;
  }
  
  .error-message {
    padding: 1rem;
    text-align: center;
    color: #dc2626;
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 0.25rem;
    margin: 1rem;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>